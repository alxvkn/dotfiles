# vim: ft=swayconfig

# Mostly default and self-explanatory

include marks

### Modes
# Resize
set {
    $resize_step 30px
    $floating_move_step 30px
    $kbd_brightness_step 25%
    $mon_brightness_step 1
}

mode "resize" {
    bindsym --to-code {
        # left will shrink the containers width
        # right will grow the containers width
        # up will shrink the containers height
        # down will grow the containers height
        $left resize shrink width $resize_step
        $down resize grow height $resize_step
        $up resize shrink height $resize_step
        $right resize grow width $resize_step

        # Ditto, with arrow keys
        Left resize shrink width $resize_step
        Down resize grow height $resize_step
        Up resize shrink height $resize_step
        Right resize grow width $resize_step

        # Return to default mode
        Return mode "default"
        Escape mode "default"
    }
}
bindsym --to-code $mod+r mode "resize"

# Pass all keys to active window (for launching other wm's inside sway)
# stolen from https://git.sr.ht/~begs/dotfiles
mode "passthrough" {
    bindsym $mod+Equal mode "default"
}
bindsym $mod+Equal mode "passthrough"

# toggle status bar visibility
bindsym --to-code $mod+b bar main mode toggle

# ~/.config/i3blocks/blocks/gnome_dark_mode:40
bindsym --to-code $mod+t exec 'echo toggle > $XDG_RUNTIME_DIR/gnome_dark_mode.sock'

bindsym --to-code {
    $mod+BackSpace exec wtype -M shift -k home -m shift -k backspace

    $mod+up exec wtype -k page_up
    $mod+down exec wtype -k page_down

    $mod+Left exec wtype -k home
    $mod+Right exec wtype -k end

    $mod+Shift+Left exec wtype -M shift -k home -m shift
    $mod+Shift+Right exec wtype -M shift -k end -m shift
}

### Workspace stuff
bindsym {
    # You guess it
    $mod+1 workspace number 1
    $mod+2 workspace number 2
    $mod+3 workspace number 3
    $mod+4 workspace number 4
    $mod+5 workspace number 5
    $mod+6 workspace number 6
    $mod+7 workspace number 7
    $mod+8 workspace number 8
    $mod+9 workspace number 9
    $mod+0 workspace number 10

    # Moving focused container to workspace
    $mod+Shift+1 move container to workspace number 1
    $mod+Shift+2 move container to workspace number 2
    $mod+Shift+3 move container to workspace number 3
    $mod+Shift+4 move container to workspace number 4
    $mod+Shift+5 move container to workspace number 5
    $mod+Shift+6 move container to workspace number 6
    $mod+Shift+7 move container to workspace number 7
    $mod+Shift+8 move container to workspace number 8
    $mod+Shift+9 move container to workspace number 9
    $mod+Shift+0 move container to workspace number 10
}

# Workspace cycling with $mod+{,Shift}+Tab and $mod+{p,n}
bindsym --to-code {
    $mod+Shift+Tab workspace prev
    $mod+Tab workspace next

    $mod+p workspace prev
    $mod+n workspace next
}
# Same with $mod+mwheel{up,down}
bindsym --whole-window {
    $mod+button4 workspace prev
    $mod+button5 workspace next
}

### Layout stuff
bindsym --to-code {
    # Moving focus with arrow and vim direction keys
    $mod+$left focus left
    $mod+$down focus down
    $mod+$up focus up
    $mod+$right focus right

    # Moving focused window with arrow and vim direction keys
    $mod+Shift+$left move left $floating_move_step
    $mod+Shift+$down move down $floating_move_step
    $mod+Shift+$up move up $floating_move_step
    $mod+Shift+$right move right $floating_move_step

    # vertically split focused window
    $mod+v splitv

    # toggle
    $mod+Shift+s sticky toggle

    # Switch the current container between different layout styles
    $mod+s layout stacking
    $mod+w layout tabbed
    $mod+e layout toggle split

    # Make the current focus fullscreen
    $mod+f fullscreen

    # Toggle the current focus between tiling and floating mode
    $mod+Shift+space floating toggle

    # Stick floating focus to current output so that it'l show up on any workspace
    $mod+Control+space sticky toggle

    # Swap focus between the tiling area and the floating area
    $mod+space focus mode_toggle


    # So uhm scratchpad
    $mod+Shift+minus move scratchpad
    $mod+minus scratchpad show

    # Move focus to the parent container
    $mod+a focus parent

    # Move focus to the child container
    $mod+Shift+a focus child

    # Kill focused container
    $mod+q kill
}

# Move and resize windows with mouse by holding $mod
floating_modifier $mod normal



# Reload config
bindsym --to-code $mod+Shift+c reload

# Switch to one of keyboard layouts
bindsym --to-code {
    $mod+i $set_en_kb
    $mod+o $set_ru_kb

    $mod+Shift+i input * xkb_variant 'dvp,'
    $mod+Shift+o input * xkb_variant ','
}

set $shortcut_mode "shortcuts: [t] - îˆ—, [b] - ï‰¨, [s] - ó°„œ, [v] - vnc, [y] - mpv $(wl-paste), [d] - ó°™¯"
mode $shortcut_mode {
    bindsym --to-code {
        t exec telegram-desktop; mode "default"
        b exec $browser; mode "default"
        s exec scrcpy -K --no-audio; mode "default"
        v exec vncviewer; mode "default"
        y exec mpv "$(wl-paste)"; mode "default"
        d exec discord; mode "default"
        f exec $file_manager; mode "default"
        Escape mode "default"
        Return mode "default"
    }
}
bindsym --to-code $mod+z mode $shortcut_mode

set $notifications_mode "[a]ctivate | [d]ismiss | [r]estore | [c]lear"
mode $notifications_mode {
    bindsym --to-code {
        a exec makoctl invoke; mode "default"
        d exec makoctl dismiss
        r exec makoctl restore
        c exec makoctl dismiss --all; mode "default"

        Escape mode "default"
        Return mode "default"
    }
}
bindsym --to-code $mod+x mode $notifications_mode

### I honestly don't now how to name this section
bindsym --to-code {
    # control mouse from keyboard
    # https://github.com/rvaiya/warpd
    # $mod+semicolon exec "killall warpd; warpd --normal"

    # Music
    $mod+Home exec "~/scripts/music.sh"
    # beautiful
    $mod+End exec "TERM="$term" ~/.config/sway/scripts/toggle_music.sh"

    $mod+g $open_windows_menu
    XF86LaunchA $open_windows_menu

    # ðŸ’€ Emoji picker
    $mod+period $set_en_kb; exec "MENU='$menu' TYPETOOL='wtype -' ~/scripts/emoji-picker.sh"
    # ðŸ’€ Emoji picker, but just copy to clipboard
    $mod+Shift+period $set_en_kb; exec "MENU='$menu' COPYTOOL='wl-copy' ~/scripts/emoji-picker.sh"

    # Lock
    $mod+Shift+Return $set_en_kb; exec $lock_with_screen_timeout

    Scroll_lock exec $lock_with_screen_timeout

    # Application launcher
    $mod+d $set_en_kb; exec $launcher

    # Open files in user dirs
    $mod+comma exec $file_launcher

    # Small floating terminal window
    $mod+grave exec $term --app-id=floating_terminal

    # Bluez bluetooth settings
    $mod+Shift+b exec $term --app-id=floating_terminal bluetoothctl

    # iwd wi-fi settings
    $mod+Shift+w exec $term --app-id=floating_terminal iwctl
    $mod+Control+w exec iwgtk

    # Terminal
    $mod+Return exec $term

    # Htop
    $mod+Escape exec $term --app-id=htop -e htop

    # Open tui mixer
    $mod+F9 exec $term --app-id=tui_mixer -e pulsemixer
    $mod+Shift+m exec $term --app-id=tui_mixer -e pulsemixer
    $mod+Control+m exec pavucontrol

    # Screenshots
    Print exec "~/scripts/wayland_screenshot.sh"
    $mod+Print exec "~/scripts/wayland_screenshot.sh --area"

    $mod+Shift+y exec "~/scripts/wayland_screenshot.sh --area"
    $mod+y exec "~/scripts/wayland_screenshot.sh"

    Shift+Print exec "~/scripts/wayland_screenshot.sh --no-save"
    $mod+Shift+Print exec "~/scripts/wayland_screenshot.sh --no-save --area"

    # Make all media bindings available on lockscreen
    --locked {
        # Brightness
        XF86KbdBrightnessUp exec brightnessctl -d '*kbd_backlight*' s $kbd_brightness_step+
        XF86KbdBrightnessDown exec brightnessctl -d '*kbd_backlight*' s $kbd_brightness_step-

        XF86MonBrightnessUp exec brightnessctl s $mon_brightness_step+
        XF86MonBrightnessDown exec brightnessctl s $mon_brightness_step-

        # Volume control
        $mod+F12 exec pactl set-sink-volume 0 +5%
        $mod+F11 exec pactl set-sink-volume 0 -5%
        $mod+F10 exec pactl set-sink-mute 0 toggle

        XF86AudioRaiseVolume exec pactl set-sink-volume 0 +5%
        XF86AudioLowerVolume exec pactl set-sink-volume 0 -5%
        XF86AudioMute exec pactl set-sink-mute 0 toggle

        # MPRIS2
        $mod+F1 exec playerctl play-pause
        $mod+F2 exec playerctl position 5-
        $mod+F3 exec playerctl position 5+
        $mod+Shift+F2 exec playerctl previous
        $mod+Shift+F3 exec playerctl next
        
        XF86AudioPause exec playerctl pause
        XF86AudioPlay exec playerctl play-pause
        XF86AudioPrev exec playerctl position 5-
        XF86AudioNext exec playerctl position 5+
        Shift+XF86AudioPrev exec playerctl previous
        Shift+XF86AudioNext exec playerctl next
    }
}

mode "logout" {
    bindsym --to-code {
        e exit; mode "default"
        u exec systemctl suspend; mode "default"
        h exec systemctl hibernate; mode "default"
        Shift+s exec systemctl poweroff; mode "default"
        l exec $lock_with_screen_timeout; mode "default"
        Return mode "default"
        Escape mode "default"
    }
}
bindsym --to-code $mod+u mode "logout"

bindswitch lid:on exec systemctl suspend

include touchpad-gestures
