### Variables
set {
    # Logo key
    $mod Mod4

    # Home row direction keys, like vim
    $left h
    $down j
    $up k
    $right l
}

set {
    $set_en_kb input type:keyboard xkb_switch_layout 0
    $set_ru_kb input type:keyboard xkb_switch_layout 1

    $wallpaper $(find ~/.local/share/backgrounds/ -mindepth 1 | shuf -n 1)

    $font IosevkaMedium
    $font_size 11

    # lock command
    $lock swaylock -i $wallpaper -s fill
    $lock_with_screen_timeout 'swayidle timeout 4 "swaymsg output \* power off" resume "swaymsg output \* power on" & swaylock -i $wallpaper -s fill; kill %1'

    # Browser
    $browser browser

    # File manager
    $file_manager nautilus

    # Terminal emulator
    $term footclient

    # Application launcher
    # Pass the final command to swaymsg so that the resulting window can be opened
    # on the original workspace that the command was run on.
    $launcher menu_path | fuzzel --font=$font -dp 'run> ' | xargs swaymsg exec --

    # General purpose menu
    $menu fuzzel --font=$font -d

    # Open files from user dirs
    $file_launcher exec find Downloads Documents Pictures Videos Music Public -type f ! -path '*/.*' | $menu -a top -w 128 -l 100 | xargs -I{} xdg-open '{}'

    $open_windows_menu exec swaymsg -t get_tree | jq -r '.. | objects | select(has("app_id")) | (.id | tostring | (. + " " * (6 - length))) + .name' | sort -rn | $menu | cut -d ' ' -f 1 | xargs -I{} swaymsg "[con_id={}]" focus
}

# machine-local settings, which make no sense lying on dotfiles repo
# e.g. monitor setup
include local/*

### Input
# Keyboard
input * {
    xkb_numlock enable
    xkb_layout us,ru
    xkb_options grp:alt_shift_toggle,grp:ctrl_space_toggle,caps:escape,grp_led:caps
}

# Mouse
input type:pointer {
    accel_profile flat
    pointer_accel -0.4
}

input type:touchpad {
    tap enabled
    scroll_factor 0.2
}

# hide mouse cursor when anything is pressed on keyboard
seat * hide_cursor when-typing enable



### Appearance
# Font
font $font $font_size

include ~/.cache/wal/colors-sway

# Colors
set {
    $bg #0C0C10
    $fg #ffffff
    # $bg $background
    # $fg $foreground
    $inactive_fg $color2
    $inactive_fg #444444
}

# class                 border  bg      text    indicator   child_border
client.focused          $fg     $bg     $fg     #aaaaaa     #aaaaaa
client.focused_inactive #000000 $bg     #aaaaaa
client.unfocused        #000000 $bg     #aaaaaa             #000000

# Gaps
gaps inner 0px
# smart_gaps on

# Borders
smart_borders on
default_border pixel 1
default_floating_border normal 1

focus_on_window_activation focus

# Wallpaper
output * bg $wallpaper fill #000000

# Bar
bar {
    id main
    # status_command ~/dev/bstatus/main.py
    status_command SCRIPT_DIR=~/.config/i3blocks/blocks i3blocks
    separator_symbol ' ÔÅì '
    position top

    height 24
    strip_workspace_numbers no
    workspace_min_width 28

    gaps 0px
    colors {
        background          #000000
        statusline          $fg
        separator           $inactive_fg

        #                   border          bg      text
        focused_workspace   $fg             $fg     $bg
        inactive_workspace  $inactive_fg    $bg     $inactive_fg
        urgent_workspace    $inactive_fg    $bg     #ffaaaa
    }
}

include {
    # Fix for gtk apps waiting for xdg_desktop_portal to be started through dbus is
    # implemented in /etc/sway/config.d/50-systemd-user.conf
    # Since waybar uses gtk, you probably should include system configs before you start it
    /etc/sway/config.d/*
}

include binds

# binds:177
for_window [app_id=floating_terminal] {
    floating enable
    resize set {
        height 80 ppt
        width 80 ppt
    }
    move position 10 ppt 10 ppt
}

for_window [class=scrcpy] floating enable

for_window [app_id=org.twosheds.iwgtk] floating enable, move position cursor

for_window [app_id=pavucontrol] floating enable, move position cursor

# HOLY FUCK IT REALLY DID WORK OUT!!!
# telegram's tray icon's context menu has the
# same app_id as the actual telegram window,
# but always has this exact title

# (title for the real window is "Telegram (*count of unread chats*))
for_window [title=TelegramDesktop] {
    floating enable
    move position cursor
}

# open mixer as floating window ./binds:189
for_window [app_id=tui_mixer] {
    floating enable
    sticky enable
    resize set {
        height 30 ppt
        width 40 ppt
    }
    move position 58 ppt 68 ppt
}

# TODO: sway.env.sh
exec swayidle -w before-sleep 'swaymsg $set_en_kb; $lock -f'


### Autostart
exec {
    # Sway's "exec" command has one not that much documented feature:
    #   If exact process that was started with it creates a window
    #   then the window will be placed on workspace that was focused when it was called
    # And if line starting foot server looks like this:
    #       exec foot --server
    # This creates unpleasant situation with
    # first (after sway startup) footclient window always
    # being created on the first workspace,
    # no matter which one is focused at the moment.
    # With all this in mind we can just append and ampersand
    foot --server &
}
