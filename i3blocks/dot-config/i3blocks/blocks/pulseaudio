#!/bin/sh

# pactl -f json list sinks | jq '.[] | select(.index == 45) | .properties["alsa.long_card_name"]'

sink_active_port_type() {
    JSON="$(pactl -f json list sinks 2>/dev/null)"
    echo $JSON | jq -r -c '.[] | select(.name == "'"$1"'") | .active_port as $active_port | .ports[] | select(.name == $active_port) | .type'
}

sink_device_api() {
    JSON="$(pactl -f json list sinks 2>/dev/null)"
    # echo $JSON | jq -r '.[] | select(.properties."device.api" == "bluez5")'
    echo $JSON | jq -r '.[] | select(.name == "'"$1"'") | .properties."device.api"'
}

sink_muted() {
    # pactl -f json list sinks 2>/dev/null | jq '.[] | select(.name == "'"$1"'") | .mute' |
    #     { read bool; [ $bool = 'true' ]; }
    # funny how they actually have this command
    pactl get-sink-mute @DEFAULT_SINK@ |
        { read mute; [ "$mute" = 'Mute: yes' ]; }
}

sink_index_by_name() {
    pactl -f json list sinks 2>/dev/null | jq '.[] | select(.name == "'"$1"'") | .index'
}

on_update() {
    # !!! volume shown is for left channel
    case "$(sink_active_port_type $(pactl get-default-sink))" in
        HDMI)
            icon_unmuted=󰽟
            icon_muted=󰽠
            ;;
        Headphones)
            icon_unmuted=󰋋
            icon_muted=󰟎
            ;;
        *)
            icon_unmuted=󰕾
            icon_muted=󰝟
            ;;
    esac

    if [ "$(sink_device_api $(pactl get-default-sink))" = bluez5 ]; then
        battery_percentage="$(bluetoothctl info | grep 'Battery Percentage' | sed 's/.*(\(.*\))/\1/')"
        icon_api="󰥉 $battery_percentage%"
    else
        icon_api=
    fi

    if sink_muted; then
        icon="$icon_muted"
        volume=
    else
        icon="$icon_unmuted"
        volume=$(pactl get-sink-volume @DEFAULT_SINK@ | awk 'NR==1{ print $5 }')
    fi
    echo $icon_api $icon "$volume"
}

# pactl json output is fucked up
# at least with jq (maybe it expects a newline before each new object)
pactl subscribe |
    stdbuf -o0 grep -e "on sink #" -e "on server #" |
    while read void
    do
        on_update
    done &

on_update

while read button; do
    case $button in
        1) pactl set-sink-mute 0 toggle
            ;;
        3)
            (if pgrep pavucontrol; then
                pkill pavucontrol
            else
                pavucontrol &
            fi) 2>&1 >/dev/null
            ;;
        4) pactl set-sink-volume 0 +5%
            ;;
        5) pactl set-sink-volume 0 -5%
            ;;
    esac
done

